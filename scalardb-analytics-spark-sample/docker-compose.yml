version: "3"
services:
  spark-shell:
    build:
      context: ./docker
      dockerfile: Dockerfile.spark
    volumes:
      - ./scalardb.properties:/etc/scalardb.properties
      - ./cert.pem:/etc/cert.pem
      - .scala_history_jline3:/root/.scala_history_jline3
    networks:
      - scalar-network
    profiles:
      - dev
    depends_on:
      - backend-postgres
      - backend-cassandra
      - backend-dynamodb
    command:
      - "/opt/spark/bin/spark-shell"
      - "--packages"
      - "com.scalar-labs:scalardb-analytics-spark-3.5_2.12:3.12.0"

  backend-postgres:
    image: postgres:15.1
    ports:
      - "5432"
    volumes:
      - backend-postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=test
    networks:
      - scalar-network
    healthcheck:
      test: ["CMD", "psql", "-U", "postgres", "-c", "select 1"]
      interval: 1s
      timeout: 1s
      retries: 10
      start_period: 1s

  backend-cassandra:
    image: cassandra:3.11
    ports:
      - "9042"
    volumes:
      - backend-cassandra-data:/var/lib/cassandra
    environment:
      - CASSANDRA_DC=dc1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
    networks:
      - scalar-network
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "exit"]
      interval: 1s
      timeout: 1s
      retries: 10
      start_period: 5s

  backend-dynamodb:
    image: amazon/dynamodb-local:1.21.0
    ports:
      - "8000"
    command:
      [
        "-jar",
        "DynamoDBLocal.jar",
        "-sharedDb",
        "-dbPath",
        "/home/dynamodblocal",
        "-optimizeDbBeforeStartup",
      ]
    volumes:
      - backend-dynamodb-data:/home/dynamodblocal
    networks:
      - scalar-network

  sample-data-loader:
    build:
      context: sample-data-loader
      dockerfile: Dockerfile
    volumes:
      - ./scalardb.properties:/etc/scalardb.properties
      - ./schema.json:/etc/schema.json
      - ./data:/data
    working_dir: /sample-data-loader
    networks:
      - scalar-network
    profiles:
      - dev
    depends_on:
      - backend-postgres
      - backend-cassandra
      - backend-dynamodb
    command: ["java", "-jar", "/app.jar"]

volumes:
  analytics-data: {}
  backend-postgres-data: {}
  backend-cassandra-data: {}
  backend-dynamodb-data: {}

networks:
  scalar-network: {}
