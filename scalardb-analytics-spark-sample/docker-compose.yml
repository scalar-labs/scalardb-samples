services:
  spark-sql:
    build:
      context: ./docker
      dockerfile: Dockerfile.spark
    volumes:
      - ./scalardb.properties:/etc/scalardb.properties
      - ./spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
      - .scala_history:/root/.scala_history
    networks:
      - scalar-network
    profiles:
      - dev
    depends_on:
      - scalardb-cassandra
      - scalardb-mysql
      - postgres
    command:
      - "/opt/spark/bin/spark-sql"
      - "--packages"
      - "com.scalar-labs:scalardb-analytics-spark-all-3.5_2.12:3.14.0"

  sample-data-loader:
    build:
      context: sample-data-loader
      dockerfile: Dockerfile
    volumes:
      - ./scalardb.properties:/etc/scalardb.properties
      - ./schema.json:/etc/schema.json
      - ./data:/data
    working_dir: /sample-data-loader
    networks:
      - scalar-network
    profiles:
      - dev
    depends_on:
      - scalardb-cassandra
      - scalardb-mysql
      - postgres
    command: ["java", "-jar", "/app.jar"]

  scalardb-cassandra:
    image: cassandra:3.11
    ports:
      - 9042
    volumes:
      - scalardb-cassandra-data:/var/lib/cassandra
    environment:
      - CASSANDRA_DC=dc1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
    networks:
      - scalar-network
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "exit"]
      interval: 1s
      timeout: 1s
      retries: 10
      start_period: 10s

  scalardb-mysql:
    image: mysql:8.0.36
    ports:
      - 3306
    volumes:
      - scalardb-mysql-data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=mysql
      - MYSQL_DATABASE=sampledb
    networks:
      - scalar-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root"]
      interval: 1s
      timeout: 1s
      retries: 10
      start_period: 5s

  postgres:
    image: postgres:15.1
    ports:
      - 5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./data/customer.csv:/opt/customer.csv
      - ./sql/postgres_copy.sql:/docker-entrypoint-initdb.d/postgres_copy.sql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=sampledb
    networks:
      - scalar-network
    healthcheck:
      test: ["CMD", "psql", "-U", "postgres", "-c", "select 1"]
      interval: 1s
      timeout: 1s
      retries: 10
      start_period: 5s

volumes:
  analytics-data: {}
  scalardb-cassandra-data: {}
  scalardb-mysql-data: {}
  postgres-data: {}

networks:
  scalar-network: {}
